@using System.Timers;

@implements IDisposable
@typeparam TItem

<div class="carousel slide h-100 @(TransitionType.Value == CarouselTransition.Fade ? "carousel-fade" : "") @CssClass">
    @if (ShowIndicators.Value)
    {
        <ol class="carousel-indicators">
            @for (int i = 0; i < Items.Count; i++)
            {
                var localIndex = i;
                <li class="@GetItemClass(localIndex)" @onclick="@(() => SetActiveItemIndex(localIndex))"></li>
            }
        </ol>
    }

    <div class="carousel-inner h-100">
        @for (int i = 0; i < Items.Count; i++)
        {
            var localIndex = i;
            <div class="carousel-item h-100 @GetItemClass(localIndex)">
                @ItemTemplate(Items[localIndex])
            </div>
        }
    </div>

    @if (ShowControls.Value)
    {
        <a class="carousel-control-prev" role="button" @onclick="OnPreviousClicked">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" role="button" @onclick="OnNextClicked">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    }
</div>

@code {
    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    public IReadOnlyList<TItem> Items { get; set; }

    [Parameter]
    public CarouselTransition? TransitionType { get; set; }

    [Parameter]
    public int? ScrollInterval { get; set; }

    [Parameter]
    public bool? ShowIndicators { get; set; }

    [Parameter]
    public bool? ShowControls { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    private Timer scrollTimer;
    private int activeItemIndex;

    protected override void OnParametersSet()
    {
        ScrollInterval ??= 5000;
        ShowIndicators ??= true;
        ShowControls ??= true;
        TransitionType ??= CarouselTransition.Slide;
        CssClass ??= string.Empty;

        if ((ScrollInterval ?? 0) > 0)
        {
            if (scrollTimer == null)
            {
                scrollTimer = new Timer();

                scrollTimer.Elapsed += (o, e) =>
                {
                    InvokeAsync(() => OnNextClicked());
                };
            }

            scrollTimer.Interval = ScrollInterval.Value;
            scrollTimer.Start();
        }

        base.OnParametersSet();
    }

    protected void OnNextClicked()
    {
        activeItemIndex++;

        if (activeItemIndex == Items.Count)
        {
            activeItemIndex = 0;
        }

        StateHasChanged();
    }

    protected void OnPreviousClicked()
    {
        activeItemIndex--;

        if (activeItemIndex < 0)
        {
            activeItemIndex = Items.Count - 1;
        }

        StateHasChanged();
    }

    private string GetItemClass(int itemIndex)
    {
        return (activeItemIndex == itemIndex) ? "active" : "";
    }

    private void SetActiveItemIndex(int newIndex)
    {
        activeItemIndex = newIndex;
        StateHasChanged();
    }

    public void Dispose()
    {
        if (scrollTimer != null)
        {
            scrollTimer.Stop();
            scrollTimer.Dispose();
        }
    }
}