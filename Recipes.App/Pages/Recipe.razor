@page "/recipe"
@page "/recipe/{RecipeId:int}"
@page "/recipe/{RecipeId:int}/{RecipeMode}"

@using Component.Bootstrap.CollapsibleControl
@using Component.Bootstrap.MarkdownControl
@using Component.Bootstrap.ModalControl
@using Component.Bootstrap.SpinnerControl
@using Component.Bootstrap.TabControl
@using Library.Core.Extensions
@using Recipes.App.Models
@using Serilog

@inject ApplicationState State
@inject RecipeService Service
@inject NavigationManager NavigationManager

<div class="container">
    @if (loadFailed)
    {
        <div class="alert alert-danger text-center font-weight-bold p-5 w-100 shadow" role="alert">
            Sorry, we could not load this page due to an error.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header text-white bg-purple-dark">
                <span class="oi oi-@(createMode ? "plus" : editMode ? "pencil" : "info") mr-2"></span>
                <span class="font-weight-bold">Recipe</span>
                @if (!createMode)
                {
                    <span class="badge badge-warning float-right" title="Recipe Id">@RecipeId</span>
                }
            </div>
            <div class="card-body">
                @if (model == null)
                {
                    <Spinner />
                }
                else
                {
                    <EditForm Model=@model OnValidSubmit="@SubmitForm">
                        <DataAnnotationsValidator />
                        <div class="form-row">
                            <div class="form-group col-md-8">
                                <label for="recipeName">Name</label>
                                <InputText id="recipeName" class="form-control" @bind-Value="model.RecipeName" readonly=@viewMode />
                                <ValidationMessage For="() => model.RecipeName" />
                            </div>
                            <div class="form-group col-md-4">
                                <label for="recipeAuthor">Author</label>
                                <InputText id="recipeAuthor" class="form-control" @bind-Value="model.RecipeAuthor" readonly=@viewMode />
                                <ValidationMessage For="() => model.RecipeAuthor" />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-8">
                                <label for="recipeVideo">Video</label>
                                <InputText id="recipeVideo" class="form-control" @bind-Value="model.RecipeVideo" readonly=@viewMode />
                            </div>
                            <div class="form-group col-md-4">
                                <label for="recipeCategory">Category</label>
                                <InputSelect id="recipeCategory" class="form-control" @bind-Value="model.CategoryId" readonly=@viewMode>
                                    @if (createMode)
                                            {
                                        <option value="" selected disabled hidden>Choose Category...</option>
                                            }
                                    /**/
                                    @if (categories != null)
                                            {
                                        @foreach (var category in categories)
                                                {
                                            <option value="@category.CategoryId" disabled=@viewMode>@category.CategoryName</option>
                                                }
                                        /**/
                                            }
                                    /**/
                                </InputSelect>
                                <ValidationMessage For="() => model.CategoryId" />
                            </div>
                        </div>
                        <Tab CssClass="nav-fill bg-light border border-light">
                            <TabPage>
                                <TabHeader>
                                    <span class="d-block text-left">
                                        <span class="oi oi-list mr-2" /> Ingredients
                                    </span>
                                </TabHeader>
                                <TabContent>
                                    <div class="border-right border-bottom border-left p-3 mb-3">
                                        @if (viewMode)
                                        {
                                            <div class="md-container form-control @(viewMode ? "readonly" : "")" style="height: 300px;">
                                                <MdPreview Text="@model.RecipeIngredients" />
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="form-group col-12 px-0">
                                                <label for="recipeIngredients" class="sr-only">Ingredients</label>
                                                <InputTextArea id="recipeIngredients" class="form-control" rows="10" cols="75" wrap="off" @bind-Value="model.RecipeIngredients" readonly=@viewMode />
                                                <ValidationMessage For="() => model.RecipeIngredients" />
                                            </div>
                                            <Collapsible CaptionCollapsed="Hide Preview" CaptionExpanded="Preview" CssClass="btn-info" IconOnRight="true" Disabled=@(() => model.RecipeIngredients.IsNullOrWhiteSpace())>
                                                <div class="md-container col-12 w-100 p-2 border">
                                                    <MdPreview Text="@model.RecipeIngredients" />
                                                </div>
                                            </Collapsible>
                                        }
                                    </div>
                                </TabContent>
                            </TabPage>
                            <TabPage>
                                <TabHeader>
                                    <span class="d-block text-left">
                                        <span class="oi oi-project mr-2" /> Procedures
                                    </span>
                                </TabHeader>
                                <TabContent>
                                    <div class="border-right border-bottom border-left p-3 mb-3">
                                        @if (viewMode)
                                        {
                                            <div class="md-container form-control @(viewMode ? "readonly" : "")" style="height: 300px;">
                                                <MdPreview Text="@model.RecipeProcedures" />
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="form-group col-12 px-0">
                                                <label for="recipeProcedures" class="sr-only">Procedures</label>
                                                <InputTextArea id="recipeProcedures" class="form-control" rows="10" cols="75" wrap="off" @bind-Value="model.RecipeProcedures" readonly=@viewMode />
                                                <ValidationMessage For="() => model.RecipeProcedures" />
                                            </div>
                                            <Collapsible CaptionCollapsed="Hide Preview" CaptionExpanded="Preview" CssClass="btn-info" IconOnRight="true" Disabled=@(() => model.RecipeProcedures.IsNullOrWhiteSpace())>
                                                <div class="md-container col-12 w-100 p-2 border">
                                                    <MdPreview Text="@model.RecipeProcedures" />
                                                </div>
                                            </Collapsible>
                                        }
                                    </div>
                                </TabContent>
                            </TabPage>
                        </Tab>
                        <div class="form-row px-1">
                            @if (viewMode)
                            {
                                <button type="button" class="btn btn-primary col-4 col-sm-4 col-md-3 col-lg-2" @onclick="Edit">Edit</button>
                                <button type="button" class="btn btn-primary col-4 col-sm-4 col-md-3 col-lg-2 ml-3" @onclick="@(() => deleteDialog.ShowDialog())">Delete</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-primary col-4 col-sm-4 col-md-3 col-lg-2 @(saving.IIf("disabled", ""))">
                                    <span class="spinner-border spinner-border-sm mr-2 @(saving.IIf("", "d-none"))" role="status" aria-hidden="true"></span>
                                    @saving.IIf("Saving...", "Save")
                                </button>
                                <button type="button" class="btn btn-primary col-4 col-sm-4 col-md-3 col-lg-2 ml-3" @onclick="@(() => Discard())">Discard</button>
                            }
                            <button type="button" class="btn btn-primary ml-3 float-right" @onclick="@(() => Done())" title="To Recipe Page">
                                <span class="oi oi-book"></span>
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    }
</div>

@if (model != null)
{
    <Modal @ref="deleteDialog" Caption="@model.RecipeName" Buttons="Delete;Cancel" ButtonClickHandler="@DeleteAsync">
        Are you sure you want to delete this recipe ?
    </Modal>

    <Modal @ref="discardDialog" Caption="Discard Changes" Buttons="Discard;Cancel" ButtonClickHandler="@Discard">
        Are you sure you want to discard the changes ?
    </Modal>
    <Modal @ref="doneDialog" Caption="Discard Changes" Buttons="Discard;Cancel" ButtonClickHandler="@Done">
        Are you sure you want to discard the changes ?
    </Modal>
}

@code {
    [Parameter]
    public int? RecipeId { get; set; }

    [Parameter]
    public string? RecipeMode { get; set; }


    private bool loadFailed;
    private bool initializedFailed;
    private bool parametersSetFailed;
    private bool createMode;
    private bool editMode;
    private bool viewMode;
    private bool saving;
    private string oldData = default!;
    private Modal deleteDialog = default!;
    private Modal discardDialog = default!;
    private Modal doneDialog = default!;
    private ViewModels.Recipe model = default!;
    private List<ViewModels.CategoryKeyValue> categories = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);

        try
        {
            categories = await Service.GetCategoriesAsync().ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            initializedFailed = true;
            Log.Error(ex.ToText());
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync().ConfigureAwait(false);

        RecipeId = RecipeId ?? 0;
        RecipeMode = RecipeMode ?? string.Empty;

        createMode = RecipeId < 1 && RecipeMode.IsNullOrEmpty();
        editMode = RecipeId > 0 && RecipeMode.Equals("edit", StringComparison.OrdinalIgnoreCase);
        viewMode = !createMode && !editMode;

        if (!initializedFailed)
        {
            try
            {
                model = await Service.GetRecipeByIdAsync(RecipeId.Value).ConfigureAwait(false);
                oldData = model.Serialize();
            }
            catch (Exception ex)
            {
                parametersSetFailed = true;
                Log.Error(ex.ToText());
            }
        }

        loadFailed = initializedFailed || parametersSetFailed;
    }

    private async Task SubmitForm(EditContext editContext)
    {
        if (!saving)
        {
            saving = true;

            if (createMode)
            {
                await CreateAsync().ConfigureAwait(false);
            }
            else if (editMode)
            {
                await UpdateAsync().ConfigureAwait(false);
            }

            saving = false;

            if (createMode)
            {
                NavigationManager.NavigateTo($"{Route.App.Recipe}/{RecipeId}/edit");
            }
        }
    }

    private async Task CreateAsync()
    {
        var result = await Service.CreateRecipeAsync(model).ConfigureAwait(false);

        if (result != null)
        {
            RecipeId = result.RecipeId;

            // TODO: Toasts - Recipe saved!
        }
    }

    private async Task UpdateAsync()
    {
        var result = await Service.UpdateRecipeAsync(model).ConfigureAwait(false);

        if (result != null)
        {
            model = result;
            oldData = model.Serialize();

            // TODO: Toasts - Recipe saved!
        }
    }

    private async Task DeleteAsync(string modalResult)
    {
        if (modalResult.Equals("Delete", StringComparison.OrdinalIgnoreCase))
        {
            var deleted = await Service.DeleteRecipeAsync(model.RecipeId).ConfigureAwait(false);

            if (deleted)
            {
                NavigationManager.NavigateTo($"{Route.App.Categories}/{model.CategoryId}");
            }
        }
    }

    private void Edit()
    {
        NavigationManager.NavigateTo($"{Route.App.Recipe}/{RecipeId}/edit", true);
    }

    private void Discard(string dialogResult = "")
    {
        if (dialogResult.IsNullOrWhiteSpace() && model.Serialize() != oldData)
        {
            discardDialog.ShowDialog();
        }
        else if (dialogResult.Equals("Discard", StringComparison.OrdinalIgnoreCase))
        {
            model = oldData.Deserialize<ViewModels.Recipe>();
        }
    }

    private void Done(string dialogResult = "")
    {
        var uri = $"{Route.App.Categories}/{model.CategoryId}";

        if (dialogResult.IsNullOrWhiteSpace())
        {
            if (model.Serialize() != oldData)
            {
                uri = string.Empty;
                doneDialog.ShowDialog();
            }
        }
        else if (!dialogResult.Equals("Discard", StringComparison.OrdinalIgnoreCase))
        {
            uri = string.Empty;
        }

        if (!uri.IsNullOrEmpty())
        {
            NavigationManager.NavigateTo(uri, true);
        }
    }
}