@page "/"

@using Component.Bootstrap.SpinnerControl
@using Component.Bootstrap.CarouselControl
@using Component.Bootstrap.TableControl
@using Library.Core.Extensions
@using Recipes.App.Data
@using Recipes.App.Models
@using Recipes.App.ViewModels
@using Recipes.Core.Enumerations
@using Serilog

@inject ApplicationState State
@inject RecipeService Service
@inject NavigationManager NavigationManager

<div class="container">
    @if (loadFailed)
    {
        <div class="alert alert-danger text-center font-weight-bold w-100 p-5 shadow" role="alert">
            Sorry, we could not load this page due to an error.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-sm-2">
            <div class="col-md-7 col-xl-8 mb-4">
                <div class="card h-100 shadow">
                    <div class="card-header text-white bg-purple-dark">
                        Latest Recipes
                    </div>
                    <div class="card-body" style="height: 500px;">
                        @if (carouselItems == null)
                        {
                            <Spinner />
                        }
                        else
                        {
                            <Carousel Items="carouselItems" TItem="CarouselItem" CssClass="bg-secondary text-white rounded">
                                <ItemTemplate>
                                    <img src="@context.Image" class="d-block w-100 h-100" alt="@context.ImageAlt">
                                    <div class="carousel-caption d-none d-md-block">
                                        <h5>@context.Caption</h5>
                                        <p>@context.Body</p>
                                    </div>
                                </ItemTemplate>
                            </Carousel>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-5 col-xl-4 mb-4">
                <div class="card h-100 shadow">
                    <div class="card-header text-white bg-purple-dark">
                        Recipes by Category
                    </div>
                    <div class="card-body">
                        @if (categories == null)
                        {
                            <Spinner />
                        }
                        else
                        {
                            <Table CssClass="table-borderless table-hover table-sm">
                                <TableRow Items="categories" AutoRowTag="false">
                                    <tr @onclick="@(() => CategoryClick(context.CategoryId))">
                                        <td>
                                            @context.CategoryName
                                            <span class="badge badge-success badge-pill float-right">@context.RecipesCount</span>
                                        </td>
                                    </tr>
                                </TableRow>
                            </Table>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool loadFailed;
    private List<CategoryWithRecipes> categories = default!;
    private List<CarouselItem> carouselItems = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);

        try
        {
            var searchParameters = new ViewModels.Search
            {
                Type = $"{SearchMode.LatestRecipes}",
                Text = "N/A",
                PageNumber = 1,
                PageSize = State.Defaults.PageSize,
                TakeCount = State.Defaults.PageSize,
            };

            var getLatestRecipes = Service.SearchRecipesAsync(searchParameters);
            var getCategories = Service.GetCategoriesWithRecipesAsync();

            categories = await getCategories.ConfigureAwait(false);
            carouselItems = (await getLatestRecipes.ConfigureAwait(false)).Items
                .Select(s => new CarouselItem
                {
                    Caption = s.RecipeName,
                    Body = s.RecipeAuthor,
                    Image = s.RecipeVideo.GetYoutubeThumbnailImageURL(),
                    ImageAlt = $"{s.RecipeName} Image"
                }).ToList();
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Log.Error(ex.ToText());
        }
    }

    protected void CategoryClick(int categoryId)
    {
        NavigationManager.NavigateTo($"{Route.App.Categories}/{categoryId}");
    }
}